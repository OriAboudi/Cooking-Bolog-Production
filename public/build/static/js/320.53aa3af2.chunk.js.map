{"version":3,"file":"static/js/320.53aa3af2.chunk.js","mappings":"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","sources":["components/pages/gptPage.jsx","components/pages/modalGpt.jsx","shared/components/modalAddRecipe.jsx","shared/components/modalLoading.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport { apiPostGPT } from '../../services/services';\r\nimport Typewriter from 'typewriter-effect';\r\nimport { URL_GPT } from '../../constant/constant';\r\nimport ModalGpt from './modalGpt';\r\n\r\n\r\nfunction GptPage() {\r\n\r\n\r\n    // npm i typewriter-effect\r\n    const [fetchData, setFetchData] = useState(\"\")\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [isGeneraet, setIsGenerate] = useState(false);\r\n    const [loading, setloading] = useState(false);\r\n    const [openGpt, setOpenGpt] = useState(false);\r\n    const inputR = useRef(null);\r\n\r\n\r\n\r\n    const doApi = async () => {\r\n\r\n        setloading(true)\r\n        setFetchData(\"\")\r\n\r\n        let body = {\r\n            \"model\": \"gpt-3.5-turbo\",\r\n            \"messages\": [{ \"role\": \"user\", \"content\": inputR.current.value + \". If what is writtenhas nothing to do with food, ingredients or recipes in particular and there is a lack of context in ingredients, food or recipes, do not reply to me. And message me back. Try again to write something related to food, ingredients or recipes! Don't answer if it's not related to the topic I told you!.  \" }]\r\n        }\r\n\r\n        let { data } = await apiPostGPT(URL_GPT, body)\r\n        console.log(data);\r\n        setFetchData(data.choices[0].message.content);\r\n\r\n        setloading(false);\r\n\r\n    }\r\n    const handleInputChange = (event) => {\r\n        const newValue = event.target.value;\r\n        // Update the state with the new value\r\n        setInputValue(newValue);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=' w-[350px] sm:w-[500px] md:w-[650px] mx-auto mt-[50px]'>\r\n            <h2 className=' text-3xl font-bold tracking-tight text-gray-900 \r\n            text-center m-4 mb-4'>Personal Recipe Creator </h2>\r\n            <p className=\"text-center  text-[17px] mt-3\r\n             text-gray-600 mb-[30px]\">\r\n\r\n                A possible way to create a recipe from ingredients only using artificial intelligence is to use a machine learning model that analyzes the ingredients and generates a title, a list of ingredients and cooking instructions. The model uses visual features extracted from the image of the dish and common ingredient combinations from recipe databases. The model can adapt the recipe to the type of dish that one wants to prepare, for example: bread, cake or cookie. The model can also invent new recipes that do not exist on the internet yet.</p>\r\n\r\n            <label className='text-[17px] ' >Enter ingredients or cuisine type to generate recipe:</label>\r\n\r\n\r\n            <textarea className='block w-full p-4  rounded-md border-2 border-gray-600 mt-2 ' onChange={handleInputChange} rows={5} ref={inputR} type=\"text\" />\r\n            <div className='my-4' hidden={loading ? true : false}>\r\n                <button class=\"btn btn-outline btn-success mr-4\" disabled={inputValue == \"\" || isGeneraet ? \"disabled\" : \"\"} onClick={() => {\r\n                    setIsGenerate(true)\r\n                    doApi()\r\n                }}>GENERATE</button>\r\n                <button onClick={() => {\r\n                    setOpenGpt(true)\r\n\r\n                }}>\r\n                    <label disabled={isGeneraet ? \"\" : \"disabled\"} htmlFor=\"my-modal-3\" className=\"btn btn-outline btn-warning\">Add to Favorit</label>\r\n                </button>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {loading ? <button className=\"btn loading mt-3 ml-2\">loading</button> :\r\n                <div className='block p-4  w-full text-black rounded-md border-2 border-gray-600 mt-2 mb-[70px]'>\r\n                    <pre style={{ overflow: 'auto', whiteSpace: 'pre-wrap', fontFamily: 'sans-serif', color: 'darkblue' }}>\r\n\r\n                        <Typewriter\r\n\r\n\r\n                            options={{\r\n                                strings: fetchData,\r\n                                autoStart: true,\r\n                                delay: 30\r\n                            }} />:\r\n\r\n\r\n\r\n                    </pre>\r\n                </div>\r\n\r\n\r\n            }\r\n            <ModalGpt open={openGpt} setOpen={setOpenGpt} recipeString={fetchData} />\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default GptPage","import axios from 'axios';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport Select from 'react-tailwindcss-select';\r\nimport { ADD_RECIPE, CATEGORIES_NAME, PRESET_KEY, URL_GPT } from '../../constant/constant';\r\nimport { apiGet, apiPost, apiPostGPT } from '../../services/services';\r\nimport ModalAddRecipe from '../../shared/components/modalAddRecipe';\r\nimport ModalLoading from '../../shared/components/modalLoading';\r\n\r\nconst optionsRating = [\r\n    { value: \"0\", label: \" ✳✳✳✳✳✳\" },\r\n    { value: \"1\", label: \"⭐ \" },\r\n    { value: \"2\", label: \"⭐⭐ \" },\r\n    { value: \"3\", label: \"⭐⭐⭐ \" },\r\n    { value: \"4\", label: \"⭐⭐⭐⭐ \" },\r\n    { value: \"5\", label: \"⭐⭐⭐⭐⭐ \" },\r\n];\r\n\r\nfunction ModalGpt({ open, setOpen, recipeString }) {\r\n    const fileR = useRef();\r\n    const [selected, setSelected] = useState(null);\r\n    const [rating, setRating] = useState(null);\r\n    const [options, setOptions] = useState([])// todo options subcate\r\n    const [recipeObj, setRecipeObj] = useState(\"\")\r\n    const [data2, setData2] = useState({})\r\n    const [openMR, setOpenMR] = useState(false);\r\n    const [openML, setOpenML] = useState(false);\r\n    const formRef = useRef(null);  // reset the form when the modal closes and after edit recipe\r\n    const { register, handleSubmit, formState: { errors } } = useForm()\r\n\r\n    useEffect(() => {\r\n        doApiCat();\r\n    }, [])\r\n    const doApiCat = async () => {\r\n\r\n        const { data } = await apiGet(CATEGORIES_NAME)\r\n\r\n\r\n\r\n        const newArray = data.map(obj => {\r\n            for (let key in obj) {\r\n                if (key === 'name') {\r\n                    obj.label = obj.name;\r\n                    delete obj.name;\r\n                }\r\n                if (key === 'url_code') {\r\n                    obj.value = obj.url_code;\r\n                    delete obj.url_code;\r\n                }\r\n\r\n                delete obj._id;\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        console.log(newArray)\r\n        setOptions(newArray)\r\n    }\r\n    const handleChangeCategory = value => {\r\n        console.log(\"value:\", value);\r\n        setSelected(value);\r\n\r\n    };\r\n    const handleChangeRating = value => {\r\n\r\n        console.log(\"value:\", value);\r\n        setRating(value);\r\n    };\r\n    const uploadFile = async (_data) => {\r\n        setOpen(false)\r\n        setOpenML(true)\r\n        let formData = new FormData()\r\n        formData.append(\"file\", fileR.current.files[0])\r\n        formData.append(\"upload_preset\", PRESET_KEY);\r\n        console.log(fileR.current.files[0]);\r\n        try {\r\n\r\n            let { data } = await axios.post(`https://api.cloudinary.com/v1_1/dzchbifhx/image/upload`, formData)\r\n            console.log(data.secure_url);\r\n            if (data.secure_url) {\r\n                _data.img_url = data.secure_url;\r\n                console.log(_data);\r\n                createRecipe(_data)\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n    const createRecipe = async (_recipe) => {\r\n        setData2(\"\")\r\n        let body = {\r\n            \"model\": \"gpt-3.5-turbo\",\r\n            \"messages\": [{\r\n                \"role\": \"user\", \"content\": recipeString + \"take this recipe and give me in object by this modele \" +\r\n                    ` name: {\r\n                type: String\r\n            },\r\n            description: {\r\n                type: String\r\n            },\r\n            ingredients: {\r\n                type: Array\r\n            },\r\n            category: {\r\n                type: String\r\n            },\r\n            content: {\r\n                type: String\r\n            },\r\n         \r\n          \r\n            \"  dont return the model gust the recipe object`}]\r\n        }\r\n\r\n        let { data } = await apiPostGPT(URL_GPT, body)\r\n        let fullRecipe = eval('(' + data.choices[0].message.content + ')');\r\n\r\n\r\n        fullRecipe.img_url = _recipe.img_url\r\n        fullRecipe.info = fullRecipe.content\r\n        fullRecipe.category = _recipe.category\r\n        fullRecipe.subCategory = selected\r\n        fullRecipe.rating = rating.value\r\n\r\n        delete fullRecipe.content\r\n        console.log(fullRecipe);\r\n        setRecipeObj(fullRecipe)\r\n        dispatchDB(fullRecipe)\r\n    }\r\n    const dispatchDB = async (recipe) => {\r\n        try {\r\n            let { data } = await apiPost(ADD_RECIPE, recipe)\r\n            console.log(data);\r\n            setOpenML(false)\r\n            setOpenMR(true)\r\n        }\r\n        catch (error) {\r\n            console.log(error.response);\r\n        }\r\n    }\r\n    function handleReset() {\r\n        formRef.current.reset();\r\n        setSelected(null)\r\n        setRating(null)\r\n        fileR = null\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            {/* The button to open modal */}\r\n\r\n\r\n            {/* Put this part before </body> tag */}\r\n            <input type=\"checkbox\" id=\"my-modal-3\" checked={open} className=\"modal-toggle\" />\r\n            <div className=\"modal\">\r\n                <div className=\"modal-box relative\">\r\n                    <button className=\"btn btn-sm btn-circle absolute right-2 top-2\" onClick={() => {\r\n                        setOpen(false)\r\n                        handleReset()\r\n                    }}>X</button>\r\n\r\n                    <h3 className=\"text-lg font-bold\">Congratulations random Internet user!</h3>\r\n                    <p className=\"py-4\">You've been selected for a chance to get one year of subscription to use Wikipedia for free!</p>\r\n                    <form onSubmit={handleSubmit(uploadFile)} ref={formRef} className=\"mt-8 space-y-6 \" >\r\n                        {/*category select  */}\r\n                        <div className='my-3'>\r\n                            <label for=\"countries\" className=\"text-gray-500 font-normal text-[15px] \">Select your Category</label>\r\n                            <select id=\"countries\"\r\n                                {...register('category', { required: true })}\r\n                                className=\"mt-2 bg-gray-50 border border-gray-300 text-gray-500 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500\">\r\n                                <option value=\"\"></option>\r\n                                {options.map((item, i) => <option key={i} value={item.value}>{item.label}</option>)}\r\n                            </select>\r\n                            {errors.category && <p className='text-red-600'>Please select a category</p>}\r\n                        </div>\r\n\r\n\r\n\r\n                        {/*sub - categories select  */}\r\n                        <label className=\"text-gray-500 font-normal mt-3 text-[15px]\">\r\n                            Select Sub Category:\r\n                        </label>\r\n\r\n                        <div className='mt-2 mb-4'>\r\n                            <Select\r\n                                primaryColor={\"default\"}\r\n                                value={selected}\r\n                                onChange={handleChangeCategory}\r\n                                options={options}\r\n                                isMultiple={true}\r\n                                isSearchable={true}\r\n                                onSearchInputChange={\r\n                                    (e) => { console.log(\"value:\", e.target.value); }\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        {/* {rating} */}\r\n\r\n                        <label className=\"text-gray-500 font-normal mt-1 text-[15px]\">\r\n                            Select a Rating:\r\n                        </label>\r\n                        <div className='my-2'>\r\n                            <Select\r\n                                value={rating}\r\n                                onChange={handleChangeRating}\r\n                                options={optionsRating}\r\n                            />\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        {/* image product  */}\r\n                        <div className='flex flex-col ' >\r\n\r\n                            <label className=\"text-gray-500   font-normal text-[15px] my-2\">\r\n                                Product Image:\r\n                            </label>\r\n\r\n\r\n                            <label className=\"block mb-[36px] mt-3\">\r\n                                <span className=\"sr-only\">Choose profile photo</span>\r\n                                <input type=\"file\"\r\n                                    ref={fileR}\r\n                                    className=\"block w-full text-sm text-gray-500\r\n                                        file:mr-4 file:py-2 file:px-4\r\n                            file:rounded-full file:border-0\r\n                            file:text-sm file:font-semibold\r\n                        file:bg-slate-100 file:text-gray-500\r\n                            hover:file:bg-slate-400\r\n                                \r\n                        \"/>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <button type='submit' className='btn btn-outline'>Create</button>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <ModalLoading open={openML} setOpen={setOpenML} />\r\n            <ModalAddRecipe open={openMR} setOpen={setOpenMR} data={recipeObj} grayButtonText={\"Cancel\"} href={'/'} />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ModalGpt","import { Fragment, useRef } from 'react'\r\nimport { Dialog, Transition } from '@headlessui/react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport default function ModalAddRecipe(\r\n    {\r\n        open,\r\n        setOpen,\r\n        href,\r\n        grayButtonText,\r\n        data\r\n    }) {\r\n\r\n\r\n    \r\n    const cancelButtonRef = useRef(null)\r\n\r\n    return (\r\n        <Transition.Root show={open} as={Fragment}>\r\n            <Dialog as=\"div\" className=\"relative z-10\" initialFocus={cancelButtonRef} onClose={setOpen}>\r\n                <Transition.Child\r\n                    as={Fragment}\r\n                    enter=\"ease-out duration-300\"\r\n                    enterFrom=\"opacity-0\"\r\n                    enterTo=\"opacity-100\"\r\n                    leave=\"ease-in duration-200\"\r\n                    leaveFrom=\"opacity-100\"\r\n                    leaveTo=\"opacity-0\"\r\n                >\r\n                    <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\r\n                </Transition.Child>\r\n\r\n                <div className=\"fixed inset-0 z-10 overflow-y-auto\">\r\n                    <div className=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\r\n                        <Transition.Child\r\n                            as={Fragment}\r\n                            enter=\"ease-out duration-300\"\r\n                            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n                            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\r\n                            leave=\"ease-in duration-200\"\r\n                            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\r\n                            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n                        >\r\n                            <Dialog.Panel className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:m-4\">\r\n                                <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4 \">\r\n                                    <div className=\"flex items-center justify-center \">\r\n\r\n\r\n                                        {/* <div className=\"mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-gray-100 sm:mx-0 sm:h-10 sm:w-10\">\r\n                                        <BsShieldCheck className=\"h-6 w-6 text-green-400\" aria-hidden=\"true\" />\r\n                                        </div>\r\n\r\n                                        \r\n */}\r\n\r\n\r\n\r\n                                        {/* <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                                            <Dialog.Title as=\"h3\" className=\"text-lg font-medium leading-6 text-gray-900\">\r\n                                                {header}\r\n                                            </Dialog.Title>\r\n                                            <div className=\"mt-2\">\r\n                                                <p className=\"text-sm text-gray-500\">\r\n                                                    {description}\r\n                                                </p>\r\n                                            </div>\r\n                                        </div> */}\r\n\r\n                                        {data && <div>\r\n\r\n                                            <div className='flex flex-col  justify-center items-center   mt-[20px] mb-[20px]'>\r\n                                                <h2 className='  text-3xl font-bold tracking-tight text-green-600 text-center'> Created successfully</h2>\r\n                                                <div className='p-4'>\r\n                                                    <img src={data.img_url} className='rounded-3xl  w-[300px]' alt=\"\" />\r\n                                                </div>\r\n                                                <h2 className='text-[26px]'>{data.name}</h2>\r\n                                                {/* <div className='mt-3 sm:hidden'>\r\n                                                    <h2 className='text-center sm:text-start text-3xl font-bold tracking-tight text-gray-900'>{data.name}</h2>\r\n\r\n                                                </div> */}\r\n\r\n                                                <div className='p-4'>\r\n                                                    <div className='hidden sm:block'>\r\n                                                        <h2 className='mt-1'>Description</h2>\r\n                                                        <p className='w-[300px] md:w-[450px] mb-4 text-[15px]  text-gray-600'>{data.description}</p>\r\n\r\n                                                    </div>\r\n\r\n\r\n                                                    <div className=''>\r\n                                                        <h2 className='mt-1'>Category</h2>\r\n                                                        <p className='mb-4 '>{data.category}</p>\r\n                                                        <h2 className='mt-1'>Cooking Info</h2>\r\n                                                        <p className='w-[300px] md:w-[450px] mb-4 text-[15px]  text-gray-600'>{data.info}</p>\r\n                                                    </div>\r\n                                                    <p className='text-[15px]  text-gray-600 mb-1'>Sourc: <span>{data.url_site}</span></p>\r\n\r\n                                                    <div>\r\n                                                        <h2 className='mb-1'>Ingredients</h2>\r\n                                                        <ul className=''>\r\n                                                            {data.ingredients?.map((item, i) => {\r\n                                                                return (\r\n                                                                    <div key={i}>\r\n                                                                        <hr />\r\n                                                                        <li className='text-[15px] pl-2 p-1 text-gray-600 '>{item}</li>\r\n                                                                    </div>\r\n                                                                )\r\n                                                            })}\r\n\r\n                                                            {/* <hr />  <li className='text-[15px] pl-2 p-1 text-gray-600 '>tast</li>\r\n                                                        <hr />  <li className='text-[15px] pl-2 p-1 text-gray-600 '>tast</li>\r\n                                                        <hr />  <li className='text-[15px] pl-2 p-1 text-gray-600 '>tast</li>\r\n                                                        <hr />  <li className='text-[15px] pl-2 p-1 text-gray-600 '>tast</li>\r\n                                                        <hr />  <li className='text-[15px] pl-2 p-1 text-gray-600 '>tast</li>\r\n                                                        <hr />  <li className='text-[15px] pl-2 p-1 text-gray-600 '>tast</li> */}\r\n\r\n\r\n\r\n                                                        </ul>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        }\r\n\r\n\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\r\n                                    {/* <button\r\n                                        type=\"button\"\r\n                                        className=\"inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm\"\r\n                                        onClick={() => {\r\n                                            nav(href)\r\n                                            setOpen(false)\r\n                                        }\r\n                                        }\r\n                                    >\r\n                                        {redButtonText}\r\n                                    </button> */}\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\r\n                                        onClick={() => {\r\n                                            setOpen(false)\r\n                                           \r\n                                        }}\r\n\r\n                                        ref={cancelButtonRef}\r\n                                    >\r\n                                        {grayButtonText}\r\n                                    </button>\r\n                                </div>\r\n                            </Dialog.Panel>\r\n                        </Transition.Child>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        </Transition.Root>\r\n    )\r\n}\r\n","import { Fragment, useRef } from 'react'\r\nimport { Dialog, Transition } from '@headlessui/react'\r\n\r\nimport { FaSearch } from 'react-icons/fa'\r\n\r\n\r\nexport default function ModalLoading (\r\n  {\r\n    open,\r\n    setOpen,\r\n \r\n\r\n  }) {\r\n\r\n\r\n\r\n  const cancelButtonRef = useRef(null)\r\n\r\n  return (\r\n    <Transition.Root show={open} as={Fragment}>\r\n      <Dialog as=\"div\" className=\"relative z-10\" initialFocus={cancelButtonRef} onClose={setOpen}>\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"ease-out duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"ease-in duration-200\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\r\n        </Transition.Child>\r\n\r\n        <div className=\"fixed inset-0 z-10 overflow-y-auto\">\r\n          <div className=\"flex min-h-full items-start justify-center p-4 text-center sm:items-center sm:p-0\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-out duration-300\"\r\n              enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n              enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\r\n              leave=\"ease-in duration-200\"\r\n              leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\r\n              leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n            >\r\n              <Dialog.Panel className=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\">\r\n                <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                  <div className=\"sm:flex sm:items-start\">\r\n                   \r\n                    <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                      <Dialog.Title as=\"h3\" className=\"text-lg font-medium leading-6 text-gray-900\">\r\n                        \r\n                      </Dialog.Title>\r\n                      <div className=\"mt-2\">\r\n                      \r\n                        <div>\r\n                        <img src=\"https://media.tenor.com/p1px63RmzGEAAAAC/cinnamon-rolls-sending-virtual-hug.gif\" alt=\"loading\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n             \r\n              </Dialog.Panel>\r\n            </Transition.Child>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  )\r\n}\r\n"],"names":["useState","fetchData","setFetchData","inputValue","setInputValue","isGeneraet","setIsGenerate","loading","setloading","openGpt","setOpenGpt","inputR","useRef","doApi","body","current","value","apiPostGPT","URL_GPT","data","console","log","choices","message","content","className","onChange","event","newValue","target","rows","ref","type","hidden","class","disabled","onClick","htmlFor","style","overflow","whiteSpace","fontFamily","color","options","strings","autoStart","delay","open","setOpen","recipeString","optionsRating","label","ModalGpt","fileR","selected","setSelected","rating","setRating","setOptions","recipeObj","setRecipeObj","data2","setData2","openMR","setOpenMR","openML","setOpenML","formRef","useForm","register","handleSubmit","errors","formState","useEffect","doApiCat","apiGet","CATEGORIES_NAME","newArray","map","obj","key","name","url_code","_id","handleChangeCategory","handleChangeRating","uploadFile","_data","formData","FormData","append","files","PRESET_KEY","axios","secure_url","img_url","createRecipe","_recipe","fullRecipe","eval","info","category","subCategory","dispatchDB","recipe","apiPost","ADD_RECIPE","response","handleReset","reset","id","checked","onSubmit","for","required","item","i","primaryColor","isMultiple","isSearchable","onSearchInputChange","e","grayButtonText","href","ModalAddRecipe","cancelButtonRef","show","as","Fragment","initialFocus","onClose","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","src","alt","description","url_site","ingredients","ModalLoading"],"sourceRoot":""}